#+TITLE: Stata : programmation
#+EMAIL: chl@aliquote.org
#+LANGUAGE: fr
#+LINK: stata https://www.stata.com/help.cgi?
#+PROPERTY: header-args :session *sta* :exports both :results output
#+OPTIONS: H:3 toc:t

Ce chapitre est consacré aux techniques de programmation avec le langage Stata, et dans une moindre mesure Mata. L'ouvrage de référence demeure l'ouvrage de Mitchell \cite{mitchell-2010-data-manag} pour tout ce qui relève de l'automatisation à l'aide de commandes Stata pour la gestion de données, ainsi que l'ouvrage de Baum sur la programmation en elle-même \cite{baum-2009-introd-stata-progr}. Germán Rodríguez propose également un [[http://data.princeton.edu/stata/programming.html][excellent tutoriel]] sur son site internet. Concernant la création de commande et l'usage de Mata, l'ouvrage de Bill Gould \cite{gould-2018-mata-book}.

* Programmation avec Stata

** Les macros Stata

Ce que l'on appelle "variable" dans la plupart des langages de programmation correspond au terme "macro" dans le langage Stata. Une variable reste définie dans le sens statistique et donc correspond aux colonnes d'un tableau de données. Quant aux "macros", on en distingue [[http://www.stata.com/statalist/archive/2008-08/msg01258.html][plusieurs types]], selon leur nature ou leur portée.

Stata permet de stocker temporairement ou définitivement des valeurs calculées ou retournées par une procédure d’estimation. On parlera de macros au sens large. En voici une illustration avec le jeu de données sur les automobiles :

#+BEGIN_SRC stata
sysuse auto, clear
quietly summarize mpg, meanonly
display r(mean)
#+END_SRC

La command [[stata:summarize][summarize]] stocke temporairement la moyenne (=mean=) de la variable (ou dans le cas d'une liste de variables, de la dernière variable de la liste) en mémoire et il est possible d'obtenir la valeur de retour stockée dans =r()=. Ce type de données peut être stocké globalement (accessible depuis l’espace de travail, les programmes, etc.) ou localement, ou, comme dans l'exemple ci-dessus, affiché à l'écran.
# FIXME voir [U] 18.8

** Macros locales

Une macro locale se définit comme une expression : =local name [=] text=. Une macro locale permet de stocker sous forme de chaîne de caractères une expression (ou son résultat après évaluation dans le cas ou on utilise le signe =). Voici un exemple d'utilisation :

#+BEGIN_SRC stata
quietly summarize mpg, meanonly
local m1 r(mean)
display `m1'
#+END_SRC

Attention, l'utilisation de =m= comme nom de macro pourrait dans le cas de ce jeu de données prêter à confusion.

L'ajout du symbole = dans l'expression ci-dessus permet de stocker la valeur de retour après évaluation :

#+BEGIN_SRC stata
quietly regress mpg weight
local r2 = e(r2)
display `r2'
#+END_SRC

L’omission du signe = aurait pour conséquence de produire des résultats variable après l’estimation d’un nouveau modèle de régression. Après une instruction telle que =local r2 e(r2)=, c’est la formule =e(r2)= qui est stockée et non son résultat.

Il existe également une autre manière de définir des macros locales : [[stata:scalar][scalar]]. Essentiellement, les deux macros permettent de stocker des
valeurs pour une utilisation future. Elles se distinguent sur les points suivants : (1) les scalars sont enregistrés globalement, et non localement, d’où un risque potentiel de conflit de nom \cite{kolev-2006-scalar-variab} ; (2) Stata stocke des valeurs sans perte de précision dans les scalars et non une représentation sous forme de chaîne de caractères (environ 8 chiffres significatifs).

Un usage classique des macros locales consiste à enregistrer une liste de cofacteurs présents dans tous les modèles de régression dont on souhaite estimer les paramètres. Plutôt que de répéter systématiquement dans les modèles une même série de variables explicatives, il est souvent plus judicieux et plus économique de les stocker dans une macro, comme illustré ci-après :

#+BEGIN_SRC stata
webuse lbw
local cofactors age smoke
quietly : regress bwt `cofactors' ht
estimates store m1
quietly : regress bwt `cofactors' ht i.race
estimates store m2
estimates table m*
#+END_SRC

** Variables catégorielles

#+BEGIN_SRC stata
levelsof country, local(lvls)
local items =  `r(r)'
#+END_SRC

Consulter également les valeurs retournées par =return list=.

** Gestion des dates

#+BEGIN_SRC stata
local date: display %tdd_m_yy date(c(current_date), "DMY")
display "`date'"
summ date
local date: display %tdd_m_yy `r(max)'
display "`date'"
local date2 = subinstr(trim("`date'"), " ", "_", .)
display "`date2'"
#+END_SRC

Voir aussi

#+BEGIN_SRC stata
local date = string(date(c(current_date), "DMY"), "%tdd!_m!_Y")
local date = string(date(c(current_date), "DMY"), "%tdCCYYNNDD")
local date = string(date(c(current_date), "DMY"), "%tdCYND")
display "`date'"
#+END_SRC

[[https://medium.com/the-stata-guide/the-awesome-stata-tips-collection-6805afdedffa][The awesome Stata tips collection]].

** Compteurs et boucles

On rappelle que pour la sélection critériée d'observation dans un tableau de données, le qualificateur [[stata:if][if]] est l'un des plus utiles. Voici par exemple une instruction typique : =list [varlist] [if] [in] [, options]=, ainsi que quelques illustrations :

#+BEGIN_SRC stata
sysuse auto, clear
list price if mpg <= 13
list price if inrange(mpg, 12, 13)
list price if inlist(mpg, 13, 16, 18, 19) & foreign == 1
#+END_SRC

Les instructions [[stata:inrange][inrange]] et [[stata:inlist][inlist]] permettent de construire des listes régulières ou irrégulières de valeurs numériques. Ce principe de sélection s’applique également aux commandes de résumé numérique ([[stata:summarize][summarize]], [[stata:tabulate][tabulate]]) ou de modélisation ([[stata:regress][regress]]).

** Les différents types de boucles

En dehors des utilitaires classiques de branchement conditionnel (if/else) ou d’itération (while) détaillé dans la section suivante, Stata permet de construire des boucles à partir de nombres ou d’éléments d’une liste. Les deux commandes clés sont :

- [[stata:forvalues][forvalues]] : boucle sur une séquence régulière de nombres entiers
- [[stata:foreach][foreach]] : boucle sur une séquence d’éléments pris dans une liste (nombres, texte ou variable)

#+BEGIN_SRC stata
forvalues index = 1/3 {
  display `index'
}
#+END_SRC

Le principe de la syntaxe est simple bien qu'il fasse faire bien attention aux accolades, en particulier la dernière qui doit figurer seule sur une ligne : =forvalues macro locale = séquence {=. Pour construire une séquence régulière de nombres, on utilise l’une des formes suivantes : (1) =min/max= (comme dans le cas de =list in=) : =1/3= devient ainsi la séquence =1 2 3= ; (2) =first(step)last= : =10(5)25= devient =10 15 20 25=.

Voici une application simple qui consiste à discrétiser une variable numérique. La commande [[stata:tabulate][tabulate]] dispose de l’option =generate= qui per- met de générer des variables indicatrices (à utiliser après [[stata:xtile][xtile]], [[stata:egen cut][egen cut]] ou [[stata:autocode()][autocode()]]). Pour créer des indicatrices, on peut utiliser une boucle comme suit :

#+BEGIN_SRC stata
forvalues low = 12(8)42 {
  local high = `low' + 7
  gen mpg`low'to`high' = mpg >= `low' & mpg <= `high'
}
list mpg* in 1/3
#+END_SRC

La syntaxe générique est dans ce cas =foreach macro locale in liste {=. Les élements de la liste peuvent être du texte (ne pas oublier les quotes) ou des nombres :

#+BEGIN_SRC stata
foreach v in one two three {
  display "`v'"
}
foreach num in 1 1 2 3 5 {
  display `num'
}
#+END_SRC

L'instruction [[stata:foreach][foreach]] fonctionne également avec des listes et l'on distingue eux principaux cas de figure :

- =foreach macro locale of numlist liste { ... }= : Peu de différence avec l’instruction foreach générique, mais Stata vérifiera que la liste contient exclusivement des nombres. La liste de nombres peut être une séquence construite comme dans le cas de [[stata:forvalues][forvalues]].
- =foreach macro locale of varlist liste { ... }= : Stata vérifiera que les variables figurant dans la liste existent bien, et on peut utiliser les abréviations habituelles (=var*= ou =var1-var3=) pour les [[stata:varlist][varlist]].

Voici un autre exemple d'application dans lequel on cherche à renommer un ensemble de variables :

#+BEGIN_SRC stata
xtile weightc = weight, nq(4)
quietly tabulate weightc, gen(weightc)
drop weightc
local i = 0
foreach v of varlist weightc1-weightc4 {
  local i = `i' + 1
  rename `v' w`i'
}
list w* in 1/5
#+END_SRC

Dans la même veine, on peut imaginer : le recodage en masse des niveaux d’une liste de variable ([[stata:recode][recode]]), la gestion des données manquantes ([[stata:mvdecode][mvdecode]]), etc. Un autre exemple consiste à [[http://www.stata.com/support/faqs/data-management/using-while-loops/][générer des graphiques avec des instructions non "byable"]], l'annotation d'une [[http://www.stata.com/statalist/archive/2010-06/msg01581.html][liste de variables]], ou enfin le nommage automatique de graphiques :

#+BEGIN_SRC stata
foreach x of varlist var1-var5 {
  local v : var label `x'
  twoway line yvar xvar, title("`v'")
}
#+END_SRC

** Structures de contrôle

Les structures de branchement conditionnels telles qu'une instruction if/else peuvent être utilisées directement à l'intérieur d'une boucle [[stata:foreach][foreach]], par exemple, ou dans un script /do/ de contrôle de qualité, en conjonction avec [[stata:assert][assert]]. Dans la majorité des cas, il convient toutefois de garder en tête la façon dont Stata facilite le travail sur les variables sans avoir à gérer soi-même les boucles d'itération sur les observations ([[stata:by][by]], [[stata:recode][recode]], [[stata:egen][egen]], etc.).

Attention à [[https://www.stata.com/support/faqs/data-management/multiple-operations/][ne pas confondre]] le qualificateur [[stata:if][if]] avec l'instruction de test Stata ou Mata correspondante. L'expression =sum foreign if price > 10000= ne fournira pas le même résultat que :

#+BEGIN_SRC stata
if price > 10000 {
  sum foreign
}
#+END_SRC

Usage de [[stata:cond][cond]] \cite{kantor-2005-depen}

#+BEGIN_SRC stata
sysuse auto
gen v1 = mpg > 20
gen v2 = !inrange(mpg, 0, 20)
gen v3 = cond(mpg > 20, 1, 0)
recode mpg (0/20 = 0) (21/. = 1), gen(v4)
gen v5 = irecode(mpg, 0, 20, .)
#+END_SRC

* Automatisation

* Gestion d'un package

#+BIBLIOGRAPHY: references ieeetr limit:t option:-nobibsource
